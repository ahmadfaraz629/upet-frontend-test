{"version":3,"sources":["store/sagas/app.ts","store/sagas/index.ts","store/reducers/app.ts","store/types.ts","store/reducers/index.ts","routes/index.tsx","routes/UserRoute.tsx","utils/history.ts","App.tsx","store/index.ts","index.tsx"],"names":["watcherApp","rootSaga","sagas","all","initialState","userReducer","state","action","type","payload","key","value","rootReducer","combineReducers","app","routes","DEFAULT_PATH","UserRoute","component","rest","render","props","React","createElement","RegisterRoutes","lazy","AppRoutes","path","isPrivate","fallback","map","route","title","to","history","createBrowserHistory","store","sagaMiddleware","createSagaMiddleware","sagaMonitor","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","run","configureStore","App","basename","ReactDOM","StrictMode","document","getElementById"],"mappings":"uSAIiBA,GAAV,SAAUA,IAAV,iG,eCDkBC,GAAV,SAAUA,IAAV,uEAIb,OAHMC,EAAQ,CACZF,KAFW,SAIPG,YAAID,GAJG,uC,oBCATE,EAAe,GAeNC,MAZf,WAA6D,IAAxCC,EAAuC,uDAA/BF,EAAcG,EAAiB,uCAC1D,OAAQA,EAAOC,MACb,ICRyB,gBDSvB,OAAO,2BACFF,GADL,kBAEGC,EAAOE,QAAQC,IAAMH,EAAOE,QAAQE,QAI3C,OAAOL,GERMM,EAJKC,YAAgB,CAClCC,Q,ICCiBC,EAAaC,E,uCCGjBC,EALG,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,UAAcC,EAAW,iBAE5C,OAAO,kBAAC,IAAD,iBAAWA,EAAX,CAAiBC,OADD,SAAAC,GAAK,OAAIC,IAAMC,cAAcL,EAAWG,QDD3DG,EAAiBC,gBAAK,kBAAM,uDA8BnBC,GA5BIX,EAiBG,CACpB,CACEY,KAAM,YACNT,UAAWM,EACXI,WAAW,IArBiBZ,EAyBJ,YAxBnB,WACL,OACE,kBAAC,WAAD,CAAUa,SAAU,+BAClB,kBAAC,IAAD,KACGd,EAAOe,KAAI,SAAAC,GAAK,OACdA,EAAMH,UAA4F,qCAAhF,kBAAC,EAAD,CAAWlB,IAAKqB,EAAMC,MAAOL,KAAMI,EAAMJ,KAAMT,UAAWa,EAAMb,eAErF,kBAAC,IAAD,CAAUe,GAAIjB,Q,OEXTkB,EADCC,cCSHC,G,MCJE,WACb,IAAMC,EAAiBC,YAAqB,CAAEC,kBACxCC,EAAmCC,OAAeC,sCAAwCC,IAC1FP,EAAQQ,YAAYhC,EAAa,GAAI4B,EAAgBK,YAAgBR,KAG3E,OADAA,EAAeS,IAAI7C,GACZmC,EDFYW,IAWNC,EAVC,WACd,OACE,kBAAC,IAAD,CAAUZ,MAAOA,GACf,kBAAC,IAAD,CAAeF,QAASA,EAASe,SAAS,uBACxC,kBAAC,EAAD,SEVRC,IAAS9B,OACP,kBAAC,IAAM+B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.bc300ff9.chunk.js","sourcesContent":["\n////////////// Handlers ///////////////////////\n\n////////////// Watchers ///////////////////////\nexport function* watcherApp() {\n}\n","import { all } from 'redux-saga/effects';\nimport { watcherApp } from 'store/sagas/app';\n\nexport default function* rootSaga() {\n  const sagas = [\n    watcherApp()\n  ];\n  yield all(sagas);\n}\n","import { SET_REDUX_KEY} from 'store/types';\nimport { IAction } from 'types';\n\nconst initialState = {\n};\n\nfunction userReducer(state = initialState, action: IAction) {\n  switch (action.type) {\n    case SET_REDUX_KEY:\n      return {\n        ...state,\n        [action.payload.key]: action.payload.value\n      };\n    default:\n  }\n  return state;\n}\n\nexport default userReducer;\n","export const SET_REDUX_KEY = 'SET_REDUX_KEY';","import { combineReducers } from 'redux';\nimport app from 'store/reducers/app';\n\nconst rootReducer = combineReducers({\n  app\n});\n\nexport default rootReducer;\n","import React, { Suspense, lazy } from 'react';\nimport { Switch, Redirect } from 'react-router-dom';\nimport UserRoute from 'routes/UserRoute';\nconst RegisterRoutes = lazy(() => import('pages/Register'));\n\nconst RoutesHOC = (routes: any, DEFAULT_PATH: any) => {\n  return function Component() {\n    return (\n      <Suspense fallback={<div></div>}>\n        <Switch>\n          {routes.map(route =>\n            !route.isPrivate ? <UserRoute key={route.title} path={route.path} component={route.component} /> : <></>\n          )}\n          <Redirect to={DEFAULT_PATH} />\n        </Switch>\n      </Suspense>\n    );\n  };\n};\n\nexport const dashboardRoutes = {};\n\nexport const routes = [\n  {\n    path: '/register',\n    component: RegisterRoutes,\n    isPrivate: false\n  }\n];\n\nexport const DEFAULT_PATH = '/register';\n\nconst AppRoutes = RoutesHOC(routes, DEFAULT_PATH);\nexport default AppRoutes;\n","import React from 'react';\nimport { Route } from 'react-router';\n\nconst UserRoute = ({ component, ...rest }) => {\n  const routeComponent = props => React.createElement(component, props);\n  return <Route {...rest} render={routeComponent} />;\n};\n\nexport default UserRoute;\n","import { createBrowserHistory } from 'history';\nconst history = createBrowserHistory();\nexport default history;\n","import React, { FC } from 'react';\nimport { Provider } from 'react-redux';\nimport configureStore from 'store';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from 'routes';\nimport history from 'utils/history';\n\n// Import scss\nimport './App.scss';\n\nexport const store = configureStore();\nconst App: FC = () => {\n  return (\n    <Provider store={store}>\n      <BrowserRouter history={history} basename='/upet-frontend-test'>\n        <Routes />\n      </BrowserRouter>\n    </Provider>\n  );\n};\n\nexport default App;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport sagaMonitor from '@redux-saga/simple-saga-monitor';\nimport rootSaga from 'store/sagas';\nimport rootReducer from 'store/reducers';\n\nexport default function configureStore() {\n  const sagaMiddleware = createSagaMiddleware({ sagaMonitor });\n  const composeEnhancer: typeof compose = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  const store = createStore(rootReducer, {}, composeEnhancer(applyMiddleware(sagaMiddleware)));\n\n  sagaMiddleware.run(rootSaga);\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}