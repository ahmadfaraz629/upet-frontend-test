{"version":3,"sources":["store/types.ts","utils/history.ts","store/actions/app.ts","store/sagas/app.ts","store/sagas/index.ts","store/reducers/app.ts","store/reducers/index.ts","routes/index.tsx","routes/UserRoute.tsx","App.tsx","store/index.ts","index.tsx"],"names":["action","SUBMIITED_FORM","STARTED","FULLFILLED","REJECTED","history","createHashHistory","submitFormAction","formData","type","payload","submitForm","watcherApp","axios","post","put","push","takeLatest","rootSaga","sagas","all","initialState","appReducer","state","rootReducer","combineReducers","app","routes","DEFAULT_PATH","UserRoute","component","rest","render","props","React","createElement","RegisterRoutes","lazy","AppRoutes","path","isPrivate","fallback","map","route","key","to","store","sagaMiddleware","createSagaMiddleware","sagaMonitor","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","run","configureStore","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"+HAAA,kCAAO,IAAkBA,EAMZC,EANgC,CAC3CC,QAAQ,GAAD,OADgBF,EAMc,iBAL9B,YACPG,WAAW,GAAD,OAAKH,EAAL,eACVI,SAAS,GAAD,OAAKJ,EAAL,e,gCCHV,WACMK,EAAUC,cACDD,O,gCCDf,8CAEaE,EAAmB,CAC9BL,QAAS,SAACM,GAAD,MAA2B,CAClCC,KAAMR,IAAeC,QACrBQ,QAASF,IAEXL,WAAY,SAACK,GAAD,MAA2B,CACrCC,KAAMR,IAAeE,WACrBO,QAASF,M,4NCFHG,G,WAQOC,GARjB,SAAUD,EAAWX,GAArB,uEAEE,OADMQ,EAAuBR,EAAOU,QADtC,SAEQG,IAAMC,KAAK,mCAAoCN,GAFvD,OAGE,OAHF,SAGQO,YAAIR,IAAiBJ,WAAWK,IAHxC,OAIEH,IAAQW,KAAR,qBAJF,uCAQO,SAAUJ,IAAV,iEACL,OADK,SACCK,YAAWhB,IAAeC,QAASS,GADpC,uC,eCbkBO,GAAV,SAAUA,IAAV,uEAIb,OAHMC,EAAQ,CACZP,KAFW,SAIPQ,YAAID,GAJG,uC,YCATE,EAAe,GAcNC,MAZf,WAA4D,IAAxCC,EAAuC,uDAA/BF,EAAcrB,EAAiB,uCACzD,OAAQA,EAAOS,MACb,KAAKR,IAAeE,WAClB,OAAO,2BACFoB,GADL,IAEEf,SAAUR,EAAOU,UAIvB,OAAOa,GCPMC,EAJKC,YAAgB,CAClCC,Q,ICEiBC,EAAkBC,E,uCCEtBC,EALG,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,UAAcC,EAAW,iBAE5C,OAAO,kBAAC,IAAD,iBAAWA,EAAX,CAAiBC,OADD,SAAAC,GAAK,OAAIC,IAAMC,cAAcL,EAAWG,QDA3DG,EAAiBC,gBAAK,kBAAM,uDA8BnBC,GA5BIX,EAiBa,CAC9B,CACEY,KAAM,YACNT,UAAWM,EACXI,WAAW,IArBsBZ,EAyBT,YAxBnB,WACL,OACE,kBAAC,WAAD,CAAUa,SAAU,+BAClB,kBAAC,IAAD,KACGd,EAAOe,KAAI,SAAAC,GAAK,OACdA,EAAMH,UAA2F,qCAA/E,kBAAC,EAAD,CAAWI,IAAKD,EAAMJ,KAAMA,KAAMI,EAAMJ,KAAMT,UAAWa,EAAMb,eAEpF,kBAAC,IAAD,CAAUe,GAAIjB,QEPXkB,ECDE,WACb,IAAMC,EAAiBC,YAAqB,CAAEC,kBACxCC,EAAmCC,OAAeC,sCAAwCC,IAC1FP,EAAQQ,YAAY9B,EAAa,GAAI0B,EAAgBK,YAAgBR,KAG3E,OADAA,EAAeS,IAAItC,GACZ4B,EDLYW,GAWNC,EAVC,WACd,OACE,kBAAC,IAAD,CAAUZ,MAAOA,GACf,kBAAC,IAAD,CAAYzC,QAASA,KACnB,kBAAC,EAAD,SERRsD,IAAS3B,OACP,kBAAC,IAAM4B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.0dfd51e7.chunk.js","sourcesContent":["export const API_TYPE = (action: string) => ({\n  STARTED: `${action}_STARTED`,\n  FULLFILLED: `${action}_FULLFILLED`,\n  REJECTED: `${action}_REJECTED`\n});\n\nexport const SUBMIITED_FORM = API_TYPE('SUBMIITED_FORM');\n","import { createHashHistory } from 'history';\nconst history = createHashHistory();\nexport default history;\n","import { FormValues } from 'routes/types';\nimport { SUBMIITED_FORM } from 'store/types';\n\nexport const submitFormAction = {\n  STARTED: (formData: FormValues) => ({\n    type: SUBMIITED_FORM.STARTED,\n    payload: formData\n  }),\n  FULLFILLED: (formData: FormValues) => ({\n    type: SUBMIITED_FORM.FULLFILLED,\n    payload: formData\n  })\n};\n","import axios from 'axios';\nimport { takeLatest, put } from 'redux-saga/effects';\nimport { FormValues } from 'routes/types';\nimport { submitFormAction } from 'store/actions';\nimport { SUBMIITED_FORM } from 'store/types';\nimport history from 'utils/history';\n////////////// Handlers ///////////////////////\n\nfunction* submitForm(action) {\n  const formData: FormValues = action.payload;\n  yield axios.post('https://upett.free.beeceptor.com', formData);\n  yield put(submitFormAction.FULLFILLED(formData));\n  history.push(`/register/success`);\n}\n\n////////////// Watchers ///////////////////////\nexport function* watcherApp() {\n  yield takeLatest(SUBMIITED_FORM.STARTED, submitForm);\n}\n","import { all } from 'redux-saga/effects';\nimport { watcherApp } from 'store/sagas/app';\n\nexport default function* rootSaga() {\n  const sagas = [\n    watcherApp()\n  ];\n  yield all(sagas);\n}\n","import { SUBMIITED_FORM } from 'store/types';\nimport { IAction } from 'types';\n\nconst initialState = {};\n\nfunction appReducer(state = initialState, action: IAction) {\n  switch (action.type) {\n    case SUBMIITED_FORM.FULLFILLED:\n      return {\n        ...state,\n        formData: action.payload\n      };\n    default:\n  }\n  return state;\n}\n\nexport default appReducer;\n","import { combineReducers } from 'redux';\nimport app from 'store/reducers/app';\n\nconst rootReducer = combineReducers({\n  app\n});\n\nexport default rootReducer;\n","import React, { Suspense, lazy } from 'react';\nimport { Switch, Redirect } from 'react-router-dom';\nimport UserRoute from 'routes/UserRoute';\nimport { IRoute } from './types';\nconst RegisterRoutes = lazy(() => import('pages/Register'));\n\nconst RoutesHOC = (routes: IRoute[], DEFAULT_PATH: string) => {\n  return function Component() {\n    return (\n      <Suspense fallback={<div></div>}>\n        <Switch>\n          {routes.map(route =>\n            !route.isPrivate ? <UserRoute key={route.path} path={route.path} component={route.component} /> : <></>\n          )}\n          <Redirect to={DEFAULT_PATH} />\n        </Switch>\n      </Suspense>\n    );\n  };\n};\n\nexport const dashboardRoutes = {};\n\nexport const routes: IRoute[] = [\n  {\n    path: '/register',\n    component: RegisterRoutes,\n    isPrivate: false\n  }\n];\n\nexport const DEFAULT_PATH = '/register';\n\nconst AppRoutes = RoutesHOC(routes, DEFAULT_PATH);\nexport default AppRoutes;\n","import React from 'react';\nimport { Route } from 'react-router';\n\nconst UserRoute = ({ component, ...rest }) => {\n  const routeComponent = props => React.createElement(component, props);\n  return <Route {...rest} render={routeComponent} />;\n};\n\nexport default UserRoute;\n","import React, { FC } from 'react';\nimport { Provider } from 'react-redux';\nimport configureStore from 'store';\nimport { HashRouter } from 'react-router-dom';\nimport Routes from 'routes';\nimport history from 'utils/history';\n\nexport const store = configureStore();\nconst App: FC = () => {\n  return (\n    <Provider store={store}>\n      <HashRouter history={history}>\n        <Routes />\n      </HashRouter>\n    </Provider>\n  );\n};\n\nexport default App;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport sagaMonitor from '@redux-saga/simple-saga-monitor';\nimport rootSaga from 'store/sagas';\nimport rootReducer from 'store/reducers';\n\nexport default function configureStore() {\n  const sagaMiddleware = createSagaMiddleware({ sagaMonitor });\n  const composeEnhancer: typeof compose = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  const store = createStore(rootReducer, {}, composeEnhancer(applyMiddleware(sagaMiddleware)));\n\n  sagaMiddleware.run(rootSaga);\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}